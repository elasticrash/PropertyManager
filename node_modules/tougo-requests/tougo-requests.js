/**
 * Created by tougo on 19/12/15.
 */
var express = require('express');
var router = express.Router();
var pg = require('pg');
var path = require('path');
var connectionString = require(path.join(__dirname, '../', '../', 'config'));
var app = express();
var morgan = require('morgan');
var bodyParser = require('body-parser');
var methodOverride = require('method-override');
var qb =require('tougo-query-builder');

app.use(express.static(path.join(__dirname, '../', '../')));
app.use(morgan('dev'));
app.use(bodyParser.urlencoded({'extended':'true'}));
app.use(bodyParser.json());
app.use(bodyParser.json({ type: 'application/vnd.api+json' }));
app.use(methodOverride());
app.listen(3000);
console.log("App listening on port 3000");

app.get('/api/property/list', function(req, res) {

    var results = [];

    // Get a Postgres client from the connection pool
    pg.connect(connectionString, function(err, client, done) {
        // Handle connection errors
        if(err) {
            done();
            console.log(err);
            return res.status(500).json({ success: false, data: err});
        }

        // SQL Query > Select Data
        var q = new qb;
        var qstring = q.select('*').from('property').leftjoin('property','tenant', 'tenant_id');
        var query = client.query(qstring.query);

        // Stream results back one row at a time
        query.on('row', function(row) {
            results.push(row);
        });

        // After all data is returned, close connection and return results
        query.on('end', function() {
            done();
            return res.json(results);
        });

    });

});


app.get('/api/tenant/list', function(req, res) {

    var results = [];

    // Get a Postgres client from the connection pool
    pg.connect(connectionString, function(err, client, done) {
        // Handle connection errors
        if(err) {
            done();
            console.log(err);
            return res.status(500).json({ success: false, data: err});
        }

        // SQL Query > Select Data
        var q = new qb;
        var qstring = q.select('*').from('tenant');
        var query = client.query(qstring.query);

        // Stream results back one row at a time
        query.on('row', function(row) {
            results.push(row);
        });

        // After all data is returned, close connection and return results
        query.on('end', function() {
            done();
            return res.json(results);
        });

    });

});

app.get('/api/months/list', function(req, res) {

    var results = [];

    // Get a Postgres client from the connection pool
    pg.connect(connectionString, function(err, client, done) {
        // Handle connection errors
        if(err) {
            done();
            console.log(err);
            return res.status(500).json({ success: false, data: err});
        }

        // SQL Query > Select Data
        var q = new qb;
        var qstring = q.select('*').from('month');
        var query = client.query(qstring.query);

        // Stream results back one row at a time
        query.on('row', function(row) {
            results.push(row);
        });

        // After all data is returned, close connection and return results
        query.on('end', function() {
            done();
            return res.json(results);
        });

    });

});

app.get('/api/payment/list', function(req, res) {

    var results = [];

    // Get a Postgres client from the connection pool
    pg.connect(connectionString, function(err, client, done) {
        // Handle connection errors
        if(err) {
            done();
            console.log(err);
            return res.status(500).json({ success: false, data: err});
        }

        // SQL Query > Select Data
        var q = new qb;
        var qstring = q.select('*').from('prop_pay').leftjoin('prop_pay','property', 'property_id').leftjoin('prop_pay','tenant', 'tenant_id').leftjoin('prop_pay','payment', 'payment_id').leftjoin('payment','month', 'month_id');
        console.log(qstring.query);

        var query = client.query(qstring.query);

        // Stream results back one row at a time
        query.on('row', function(row) {
            results.push(row);
        });

        // After all data is returned, close connection and return results
        query.on('end', function() {
            done();
            return res.json(results);
        });

    });

});

app.post('/api/tenant/add', function(req, res) {

    var results = [];

    // Get a Postgres client from the connection pool
    pg.connect(connectionString, function(err, client, done) {
        // Handle connection errors
        if(err) {
            done();
            console.log(err);
            return res.status(500).json({ success: false, data: err});
        }

        // SQL Query > Select Data
        var attributes =[];
        var values= [];
        Object.getOwnPropertyNames(req.query).forEach(function(val, idx, array) {
            attributes.push(val);
            values.push("'"+req.query[val]+"'");
            console.log(val + ' -> ' + req.query[val]);
        });
        var q = new qb;
        var qstring = q.insertinto("tenant", attributes, values);
        console.log(qstring.query);

        var query = client.query(qstring.query);

        // Stream results back one row at a time
        query.on('row', function(row) {
            results.push(row);
        });

        // After all data is returned, close connection and return results
        query.on('end', function() {
            done();
            console.log(results);
            return res.json(results);
        });

    });

});

app.post('/api/tenant/update', function(req, res) {

    var results = [];

    // Get a Postgres client from the connection pool
    pg.connect(connectionString, function(err, client, done) {
        // Handle connection errors
        if(err) {
            done();
            console.log(err);
            return res.status(500).json({ success: false, data: err});
        }

        // SQL Query > Select Data
        var attributes =[];
        var values= [];
        var keyexpression;
        Object.getOwnPropertyNames(req.query).forEach(function(val, idx, array) {
            if(val !== "tenant_id") {
                attributes.push(val);
                values.push("'" + req.query[val] + "'");
                console.log(val + ' -> ' + req.query[val]);
            }
            else
            {
                keyexpression = val+" = "+req.query[val];
            }
        });

        var q = new qb;
        var qstring = q.update("tenant", attributes, values).where(keyexpression);
        console.log(qstring.query);

        var query = client.query(qstring.query);

        // Stream results back one row at a time
        query.on('row', function(row) {
            results.push(row);
        });

        // After all data is returned, close connection and return results
        query.on('end', function() {
            done();
            return res.json(results);
        });

    });

});


app.post('/api/tenant/delete', function(req, res) {

    var results = [];

    // Get a Postgres client from the connection pool
    pg.connect(connectionString, function(err, client, done) {
        // Handle connection errors
        if(err) {
            done();
            console.log(err);
            return res.status(500).json({ success: false, data: err});
        }

        // SQL Query > Select Data
        var q = new qb;
        var qstring = q.delete().from('tenant').where("tenant_id="+req.query["tenant_id"]);
        console.log(qstring.query);

        var query = client.query(qstring.query);

        // Stream results back one row at a time
        query.on('row', function(row) {
            results.push(row);
        });

        // After all data is returned, close connection and return results
        query.on('end', function() {
            done();
            console.log(results);
            return res.json(results);
        });

    });

});

//property
app.post('/api/property/add', function(req, res) {

    var results = [];

    // Get a Postgres client from the connection pool
    pg.connect(connectionString, function(err, client, done) {
        // Handle connection errors
        if(err) {
            done();
            console.log(err);
            return res.status(500).json({ success: false, data: err});
        }

        // SQL Query > Select Data
        var attributes =[];
        var values= [];
        Object.getOwnPropertyNames(req.query).forEach(function(val, idx, array) {
            attributes.push(val);
            values.push("'"+req.query[val]+"'");
            console.log(val + ' -> ' + req.query[val]);
        });

        var q = new qb;
        var qstring = q.insertinto("property", attributes, values);
        console.log(qstring.query);

        var query = client.query(qstring.query);

        // Stream results back one row at a time
        query.on('row', function(row) {
            results.push(row);
        });

        // After all data is returned, close connection and return results
        query.on('end', function() {
            done();
            return res.json(results);
        });

    });

});

app.post('/api/property/update', function(req, res) {

    var results = [];

    // Get a Postgres client from the connection pool
    pg.connect(connectionString, function(err, client, done) {
        // Handle connection errors
        if(err) {
            done();
            console.log(err);
            return res.status(500).json({ success: false, data: err});
        }

        // SQL Query > Select Data
        var attributes =[];
        var values= [];
        var keyexpression;
        Object.getOwnPropertyNames(req.query).forEach(function(val, idx, array) {
            if(val !== "property_id") {
                attributes.push(val);
                values.push("'" + req.query[val] + "'");
                console.log(val + ' -> ' + req.query[val]);
            }
            else
            {
                keyexpression = val+" = "+req.query[val];
            }
        });

        var q = new qb;
        var qstring = q.update("property", attributes, values).where(keyexpression);
        console.log(qstring.query);

        var query = client.query(qstring.query);

        // Stream results back one row at a time
        query.on('row', function(row) {
            results.push(row);
        });

        // After all data is returned, close connection and return results
        query.on('end', function() {
            done();
            return res.json(results);
        });

    });

});


app.post('/api/property/delete', function(req, res) {

    var results = [];

    // Get a Postgres client from the connection pool
    pg.connect(connectionString, function(err, client, done) {
        // Handle connection errors
        if(err) {
            done();
            console.log(err);
            return res.status(500).json({ success: false, data: err});
        }

        // SQL Query > Select Data
        var q = new qb;
        var qstring = q.delete().from('property').where("property_id="+req.query["property_id"]);
        console.log(qstring.query);

        var query = client.query(qstring.query);

        // Stream results back one row at a time
        query.on('row', function(row) {
            results.push(row);
        });

        // After all data is returned, close connection and return results
        query.on('end', function() {
            done();
            return res.json(results);
        });

    });

});

app.post('/api/payment/add', function(req, res) {

    var results = [];

    // Get a Postgres client from the connection pool
    pg.connect(connectionString, function(err, client, done) {
        // Handle connection errors
        if(err) {
            done();
            console.log(err);
            return res.status(500).json({ success: false, data: err});
        }

        // SQL Query > Select Data
        var attributes =[];
        var values= [];
        Object.getOwnPropertyNames(req.query).forEach(function(val, idx, array) {
            attributes.push(val);
            values.push("'"+req.query[val]+"'");
            console.log(val + ' -> ' + req.query[val]);
        });

        var sattributes = attributes.slice(0,attributes.length-2);
        var svalues = values.slice(0,values.length-2);

        var q = new qb;
        var qstring = q.insertintowithoutputid("payment", sattributes, svalues, "payment_id");
        console.log(qstring.query);

        var query = client.query(qstring.query);

        // Stream results back one row at a time
        query.on('row', function(row) {
            results.push(row);
        });

        // After all data is returned, close connection and return results
        query.on('end', function() {
            done();
            console.log(results);
            var Rattributes = attributes.slice(attributes.length-2, attributes.length);
            var Rvalues = values.slice(values.length-2, values.length);
            Rattributes.push("payment_id");
            Rvalues.push(results[0].payment_id);
            var b = new qb;
            var q2string = b.insertinto("prop_pay",Rattributes, Rvalues);
            console.log(q2string.query);
            var secondquery = client.query(q2string.query);
            return res.json(results);
        });

    });

});

app.post('/api/connect/update', function(req, res) {

    var results = [];

    // Get a Postgres client from the connection pool
    pg.connect(connectionString, function(err, client, done) {
        // Handle connection errors
        if(err) {
            done();
            console.log(err);
            return res.status(500).json({ success: false, data: err});
        }

        // SQL Query > Select Data
        var attributes =[];
        var values= [];
        var keyexpression;

        var upid = [];
        var upvalue = [];
        upid.push("tenant_id");
        upvalue.push(req.query.tenant_id);

        var q = new qb;
        var qstring = q.update("property", upid, upvalue).where("property_id="+req.query.property_id);
        console.log(qstring.query);

        var query = client.query(qstring.query);

        // Stream results back one row at a time
        query.on('row', function(row) {
            results.push(row);
        });

        // After all data is returned, close connection and return results
        query.on('end', function() {
            done();
            return res.json(results);
        });

    });

});