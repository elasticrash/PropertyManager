/**
 * Created by tougo on 19/12/15.
 */
var express = require('express');
var router = express.Router();
var pg = require('pg');
var path = require('path');
var connectionString = require(path.join(__dirname, '../', '../', 'config'));
var app = express();
var morgan = require('morgan');
var bodyParser = require('body-parser');
var methodOverride = require('method-override');
var qb =require('tougo-query-builder');

app.use(express.static(path.join(__dirname, '../', '../')));
app.use(morgan('dev'));
app.use(bodyParser.urlencoded({'extended':'true'}));
app.use(bodyParser.json());
app.use(bodyParser.json({ type: 'application/vnd.api+json' }));
app.use(methodOverride());
app.listen(3000);
console.log("App listening on port 3000");

app.get('/api/property/list', function(req, res) {

    var results = [];

    // Get a Postgres client from the connection pool
    pg.connect(connectionString, function(err, client, done) {
        // Handle connection errors
        if(err) {
            done();
            console.log(err);
            return res.status(500).json({ success: false, data: err});
        }

        // SQL Query > Select Data
        var qstring = qb.select('*') + qb.from('property')+qb.leftjoin('property','tenant', 'tenant_id');
        var query = client.query(qstring);

        // Stream results back one row at a time
        query.on('row', function(row) {
            results.push(row);
        });

        // After all data is returned, close connection and return results
        query.on('end', function() {
            done();
            return res.json(results);
        });

    });

});


app.get('/api/tenant/list', function(req, res) {

    var results = [];

    // Get a Postgres client from the connection pool
    pg.connect(connectionString, function(err, client, done) {
        // Handle connection errors
        if(err) {
            done();
            console.log(err);
            return res.status(500).json({ success: false, data: err});
        }

        // SQL Query > Select Data
        var qstring = qb.select('*')+qb.from('tenant');
        var query = client.query(qstring);

        // Stream results back one row at a time
        query.on('row', function(row) {
            results.push(row);
        });

        // After all data is returned, close connection and return results
        query.on('end', function() {
            done();
            return res.json(results);
        });

    });

});

app.get('/api/months/list', function(req, res) {

    var results = [];

    // Get a Postgres client from the connection pool
    pg.connect(connectionString, function(err, client, done) {
        // Handle connection errors
        if(err) {
            done();
            console.log(err);
            return res.status(500).json({ success: false, data: err});
        }

        // SQL Query > Select Data
        var qstring = qb.select('*')+qb.from('month');
        var query = client.query(qstring);

        // Stream results back one row at a time
        query.on('row', function(row) {
            results.push(row);
        });

        // After all data is returned, close connection and return results
        query.on('end', function() {
            done();
            return res.json(results);
        });

    });

});

app.post('/api/tenant/add', function(req, res) {

    var results = [];

    // Get a Postgres client from the connection pool
    pg.connect(connectionString, function(err, client, done) {
        // Handle connection errors
        if(err) {
            done();
            console.log(err);
            return res.status(500).json({ success: false, data: err});
        }

        // SQL Query > Select Data
        var attributes =[];
        var values= [];
        Object.getOwnPropertyNames(req.query).forEach(function(val, idx, array) {
            attributes.push(val);
            values.push("'"+req.query[val]+"'");
            console.log(val + ' -> ' + req.query[val]);
        });

        var qstring = qb.insertinto("tenant", attributes, values);
        console.log(qstring);

        var query = client.query(qstring);

        // Stream results back one row at a time
        query.on('row', function(row) {
            results.push(row);
        });

        // After all data is returned, close connection and return results
        query.on('end', function() {
            done();
            return res.json(results);
        });

    });

});

app.post('/api/tenant/update', function(req, res) {

    var results = [];

    // Get a Postgres client from the connection pool
    pg.connect(connectionString, function(err, client, done) {
        // Handle connection errors
        if(err) {
            done();
            console.log(err);
            return res.status(500).json({ success: false, data: err});
        }

        // SQL Query > Select Data
        var attributes =[];
        var values= [];
        var keyexpression;
        Object.getOwnPropertyNames(req.query).forEach(function(val, idx, array) {
            if(val !== "tenant_id") {
                attributes.push(val);
                values.push("'" + req.query[val] + "'");
                console.log(val + ' -> ' + req.query[val]);
            }
            else
            {
                keyexpression = val+" = "+req.query[val];
            }
        });

        var qstring = qb.update("tenant", attributes, values)+qb.where(keyexpression);
        console.log(qstring);

        var query = client.query(qstring);

        // Stream results back one row at a time
        query.on('row', function(row) {
            results.push(row);
        });

        // After all data is returned, close connection and return results
        query.on('end', function() {
            done();
            return res.json(results);
        });

    });

});


app.post('/api/tenant/delete', function(req, res) {

    var results = [];

    // Get a Postgres client from the connection pool
    pg.connect(connectionString, function(err, client, done) {
        // Handle connection errors
        if(err) {
            done();
            console.log(err);
            return res.status(500).json({ success: false, data: err});
        }

        // SQL Query > Select Data
        var qstring = qb.delete()+qb.from('tenant')+qb.where("tenant_id="+req.query["tenant_id"]);
        console.log(qstring);

        var query = client.query(qstring);

        // Stream results back one row at a time
        query.on('row', function(row) {
            results.push(row);
        });

        // After all data is returned, close connection and return results
        query.on('end', function() {
            done();
            return res.json(results);
        });

    });

});
